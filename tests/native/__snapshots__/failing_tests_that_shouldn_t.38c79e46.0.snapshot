failing tests that shouldn't â€º ref resolving in string literals (and other primitive unions)
module X :
  sig
    type t = private string
    val x : t[@@bs.inline \"x\"]
    val y : t[@@bs.inline \"y\"]
  end =
  struct
    type t = string
    let x = \"x\"[@@bs.inline ]
    let y = \"y\"[@@bs.inline ]
  end 
type x = X.t
module Y : sig type t = private string val z : t[@@bs.inline \"z\"] end =
  struct type t = string
         let z = \"z\"[@@bs.inline ] end 
module Y : sig type t val x : x -> t val literal : Y.t -> t end =
  struct
    type t =
      | Any: 'a -> t [@@unboxed ]
    let x (v : x) = ((Any (v))[@explicit_arity ])
    let literal (v : Y.t) = ((Any (v))[@explicit_arity ])
  end 
type y = Y.t
